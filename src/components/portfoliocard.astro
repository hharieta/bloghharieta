---
interface Props {
  name: string;
  subname: string;
  image: string;
  author: string;
  platform: string;
  stack: string[];
  description: string;
  source: string;
  demo: string;
}

const { name, subname, image, description } = Astro.props;
const slug = name.toLowerCase().replace(/\s+/g, '-');

---


<div class="pt-10 transition ease-in-out delay-15 hover:-translate-y-1 hover:scale-0 md:hover:scale-125  duration-300 ">
  <a href={`/portfolio/${slug}`} class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow md:flex-row md:max-w-xl hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
    <img
       class="object-cover w-full rounded-t-lg md:h-52 md:w-48 md:rounded-none md:rounded-s-lg animate opacity-0 transform translate-y-12 transition-opacity duration-700 ease-out"
      src={image} 
      alt={subname}>
    <div class="flex flex-col justify-between p-4 leading-normal animate opacity-0 transform translate-y-12 transition-opacity duration-700 ease-out">
        <h5 class="mb-2 text-2xl font-bold tracking-tight text-slate-800 dark:text-white animate opacity-0 transform translate-y-12 transition-opacity duration-700 ease-out">{name}</h5>
        <p class="mb-3 font-normal text-slate-600 dark:text-gray-400 animate opacity-0 transform translate-y-12 transition-opacity duration-700 ease-out">
          {description} 
          <div class="flex flex-col items-end content-end font-mplus font-semibold  text-slate-800 hover:text-slate-600 ">
              Read More...
          </div>
        </p>
  </div>
  </a>
</div>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    const elements = document.querySelectorAll('.animate');

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('translate-y-0', 'opacity-100');
          entry.target.classList.remove('translate-y-12', 'opacity-0');
        }
      });
    }, { threshold: 0.1 });

    elements.forEach(element => {
      observer.observe(element);
    });
  });
</script>